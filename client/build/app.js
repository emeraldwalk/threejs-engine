webpackJsonp([0],[
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var THREE = __webpack_require__(0);
/**
 * Register a callback for intersections of mouse clicks with
 * objects in 3D space.
 */
function registerMouseIntersectionHandler(element, camera, intersectionCandidates, handler) {
    var raycaster = new THREE.Raycaster();
    var mouse = new THREE.Vector2();
    function mouseDown(event) {
        mouse.x = (event.clientX - this.offsetLeft) / this.width * 2 - 1;
        mouse.y = -(event.clientY - this.offsetTop) / this.height * 2 + 1;
        raycaster.setFromCamera(mouse, camera);
        var intersections = raycaster.intersectObjects(intersectionCandidates);
        handler(intersections, mouse);
    }
    element.addEventListener('mousedown', mouseDown);
    return function () { return element.removeEventListener('mousedown', mouseDown); };
}
exports.registerMouseIntersectionHandler = registerMouseIntersectionHandler;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.state = {};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var THREE = __webpack_require__(0);
/**
 * Maps uv coordinates from a tile map to geometries.
 */
var TileMapService = (function () {
    function TileMapService(config) {
        var tilesWide = config.tileMapWidth / config.tileSize;
        var tilesHigh = config.tileMapHeight / config.tileSize;
        var uUnit = 1 / tilesWide;
        var vUnit = 1 / tilesHigh;
        this._tiles = [];
        for (var y = tilesHigh - 1; y >= 0; --y) {
            for (var x = 0; x < tilesWide; ++x) {
                var u = x * uUnit;
                var v = y * vUnit;
                var tile = [
                    new THREE.Vector2(u, v),
                    new THREE.Vector2(u + uUnit, v),
                    new THREE.Vector2(u + uUnit, v + vUnit),
                    new THREE.Vector2(u, v + vUnit)
                ];
                this._tiles.push(tile);
            }
        }
    }
    Object.defineProperty(TileMapService.prototype, "tiles", {
        /**
         * UV coordinates for tiles in the tile map.
         */
        get: function () {
            return this._tiles;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Set uv coordinates on a given geometry.
     */
    TileMapService.mapUVtoGeometry = function (geometry, tile) {
        geometry.faceVertexUvs[0] = [];
        geometry.faceVertexUvs[0][0] = [tile[3], tile[0], tile[1]];
        geometry.faceVertexUvs[0][1] = [tile[1], tile[2], tile[3]];
        return geometry;
    };
    /**
     * Create an array of cloned geometries using uv maps from the tiles.
     */
    TileMapService.prototype.createUVGeometries = function (seed) {
        var geos = [];
        for (var _i = 0, _a = this._tiles; _i < _a.length; _i++) {
            var tile = _a[_i];
            var geoClone = TileMapService.mapUVtoGeometry(seed.clone(), tile);
            geos.push(geoClone);
        }
        return geos;
    };
    return TileMapService;
}());
exports.TileMapService = TileMapService;


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var THREE = __webpack_require__(0);
var THREE_ORBIT_CONTROLS = __webpack_require__(10);
//require('three-first-person-controls')(THREE);
var renderer_service_1 = __webpack_require__(9);
var BaseView = (function () {
    function BaseView(element, options) {
        if (options === void 0) { options = {}; }
        var rendererService = new renderer_service_1.RendererService({
            width: options.width || element.clientWidth,
            height: options.height || element.clientHeight,
            element: element
        });
        this._scene = new THREE.Scene();
        var axis = new THREE.AxisHelper(100);
        this._scene.add(axis);
        this._camera = options.camera || new THREE.PerspectiveCamera(75, element.clientWidth / element.clientHeight, 1, 10000);
        var OrbitControls = THREE_ORBIT_CONTROLS(THREE);
        this._renderer = rendererService.render(this._scene, this._camera);
        if (options.orbitControls) {
            var controls = new OrbitControls(this._camera, element);
        }
        // new THREE.FirstPersonControls(
        // 	this._camera,
        // 	element as HTMLElement);
    }
    Object.defineProperty(BaseView.prototype, "scene", {
        get: function () {
            return this._scene;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseView.prototype, "camera", {
        get: function () {
            return this._camera;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseView.prototype, "renderer", {
        get: function () {
            return this._renderer;
        },
        enumerable: true,
        configurable: true
    });
    return BaseView;
}());
exports.BaseView = BaseView;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var THREE = __webpack_require__(0);
var state_service_1 = __webpack_require__(2);
var base_view_1 = __webpack_require__(4);
var tilemap_service_1 = __webpack_require__(3);
var mouse_intersection_service_1 = __webpack_require__(1);
var viewElement = document.getElementsByClassName('controls-view')[0];
var width = viewElement.clientWidth;
var height = width * 16;
var aspectRatio = width / height;
var cameraWidth = 8;
var cameraHeight = cameraWidth / aspectRatio;
var orthoCamera = new THREE.OrthographicCamera(0, cameraWidth, 0, -cameraHeight, 1, 1000);
var view = new base_view_1.BaseView(viewElement, {
    camera: orthoCamera,
    width: width,
    height: height
});
var texture = new THREE.TextureLoader().load('/assets/zelda-tiles.png', function (texture) {
    view.camera.position.setZ(1);
    // view.camera.lookAt(view.scene.position);
    var squareShape = new THREE.Shape([
        new THREE.Vector2(0, 0),
        new THREE.Vector2(1, 0),
        new THREE.Vector2(1, 1),
        new THREE.Vector2(0, 1)
    ]);
    var squareGeo = new THREE.ShapeGeometry(squareShape);
    var squareMat = new THREE.MeshBasicMaterial({
        //color: 0xFF0000,
        map: texture,
        side: THREE.DoubleSide
    });
    var tileSet = new tilemap_service_1.TileMapService({
        tileMapWidth: texture.image.width,
        tileMapHeight: texture.image.height,
        tileSize: 16
    });
    /**
     * Handle clicks for tile selection.
     */
    var intersectionCandidates = [];
    var selectedSquareMesh;
    function updateSelectedSquare(intersections) {
        var i = intersectionCandidates.indexOf(intersections[0].object);
        var tile = tileSet.tiles[i];
        state_service_1.state.selectedTileIndex = i;
        var geoClone = tilemap_service_1.TileMapService.mapUVtoGeometry(squareGeo.clone(), tile);
        selectedSquareMesh = new THREE.Mesh(geoClone, squareMat);
        selectedSquareMesh.position.set(0, -36, 0);
        selectedSquareMesh.scale.set(2, 2, 2);
        view.scene.remove(selectedSquareMesh);
        view.scene.add(selectedSquareMesh);
    }
    mouse_intersection_service_1.registerMouseIntersectionHandler(view.renderer.domElement, orthoCamera, intersectionCandidates, function (intersections) {
        updateSelectedSquare(intersections);
    });
    /**
     * Render our tiles.
     */
    var x = 0;
    var y = 0;
    var col = cameraWidth;
    var squareGeos = tileSet.createUVGeometries(squareGeo);
    for (var _i = 0, squareGeos_1 = squareGeos; _i < squareGeos_1.length; _i++) {
        var geoClone = squareGeos_1[_i];
        var squareMesh = new THREE.Mesh(geoClone, squareMat);
        squareMesh.position.setX(x);
        squareMesh.position.setY(y - 1);
        view.scene.add(squareMesh);
        intersectionCandidates.push(squareMesh);
        if (x % col === col - 1) {
            x = 0;
            --y;
        }
        else {
            ++x;
        }
    }
});


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var THREE = __webpack_require__(0);
var state_service_1 = __webpack_require__(2);
var base_view_1 = __webpack_require__(4);
var tilemap_service_1 = __webpack_require__(3);
var mouse_intersection_service_1 = __webpack_require__(1);
var map2_1 = __webpack_require__(8);
var mainViewElement = document.getElementsByClassName('main-view')[0];
var view = new base_view_1.BaseView(mainViewElement, {
    orbitControls: true
});
var tileSize = 16;
var height = tileSize * 10; //mainViewElement.clientHeight
view.camera.position.set(height, height / 2, height);
view.camera.lookAt(view.scene.position);
var texture = new THREE.TextureLoader().load('/assets/zelda-tiles.png', function (texture) {
    var tileSet = new tilemap_service_1.TileMapService({
        tileMapWidth: texture.image.width,
        tileMapHeight: texture.image.height,
        tileSize: tileSize
    });
    var squareShape = new THREE.Shape([
        new THREE.Vector2(0, 0),
        new THREE.Vector2(tileSize, 0),
        new THREE.Vector2(tileSize, tileSize),
        new THREE.Vector2(0, tileSize)
    ]);
    var squareGeo = new THREE.ShapeGeometry(squareShape);
    squareGeo.rotateX(-90 * Math.PI / 180);
    var squareMat = new THREE.MeshBasicMaterial({
        //color: 0xFF0000,
        map: texture,
        side: THREE.DoubleSide
    });
    // let tileMap = [
    // 	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    // 	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    // 	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    // 	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    // 	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    // 	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    // 	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    // 	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    // 	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    // 	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    // ];
    var tiles = [];
    var cols = map2_1.map[0].length;
    var rows = map2_1.map.length;
    for (var y = 0; y < rows; ++y) {
        for (var x = 0; x < cols; ++x) {
            tiles.push({
                x: (x - cols / 2) * tileSize,
                y: ((y - rows / 2) + 1) * tileSize,
                i: map2_1.map[y][x]
            });
        }
    }
    var intersectionCandidates = [];
    mouse_intersection_service_1.registerMouseIntersectionHandler(view.renderer.domElement, view.camera, intersectionCandidates, function (intersections) {
        if (intersections[0] && state_service_1.state.selectedTileIndex !== undefined) {
            var tile = tileSet.tiles[state_service_1.state.selectedTileIndex];
            var mesh = intersections[0].object;
            var geoClone = mesh
                .geometry
                .clone();
            tilemap_service_1.TileMapService.mapUVtoGeometry(geoClone, tile);
            var meshClone = new THREE.Mesh(geoClone, squareMat);
            meshClone.position.x = mesh.position.x;
            meshClone.position.z = mesh.position.z;
            view.scene.remove(mesh);
            view.scene.add(meshClone);
            var index = intersectionCandidates.indexOf(mesh);
            if (index > -1) {
                intersectionCandidates.splice(index, 1);
            }
            intersectionCandidates.push(meshClone);
        }
    });
    var mapObject = new THREE.Object3D();
    view.scene.add(mapObject);
    var geoClones = [];
    for (var _i = 0, tiles_1 = tiles; _i < tiles_1.length; _i++) {
        var tile = tiles_1[_i];
        var geoClone = geoClones[tile.i] = geoClones[tile.i] || squareGeo.clone();
        tilemap_service_1.TileMapService.mapUVtoGeometry(geoClone, tileSet.tiles[tile.i]);
        var squareMesh = new THREE.Mesh(geoClone, squareMat);
        squareMesh.position.x = tile.x;
        squareMesh.position.z = tile.y;
        mapObject.add(squareMesh);
        intersectionCandidates.push(squareMesh);
    }
});


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(6);
__webpack_require__(5);


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.map = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 31, 30, 31, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 30, 31, 30, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 30, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 30, 31, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 0, 0, 30, 85, 85, 85, 31, 0, 0, 30, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 85, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 31, 0, 0, 0, 0, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 109, 85, 85, 85, 85, 108, 109, 85, 85, 85, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 85, 85, 111, 112, 112, 112, 112, 112, 112, 112, 113, 85, 85, 85, 0, 0, 30, 85, 85, 85, 85, 114, 115, 116, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 31, 30, 85, 85, 85, 85, 85, 31, 30, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 114, 116, 85, 114, 117, 116, 85, 114, 116, 85, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 31, 30, 31, 0, 0, 30, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 31, 0, 0, 30, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 109, 85, 85, 108, 0, 0, 109, 85, 85, 31, 30, 31, 30, 85, 85, 85, 85, 85, 85, 85, 31, 30, 31, 30, 31, 0, 0, 0, 0, 0, 0, 0, 30, 85, 85, 31, 0, 0, 30, 31, 0, 0, 30, 31, 30, 85, 85, 85, 85, 85, 85, 85, 31, 30, 31, 30, 31, 0, 30, 85, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 85, 0, 0, 85, 85, 147, 85, 147, 148, 2, 149, 147, 85, 147, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 148, 149, 85, 148, 2, 149, 85, 148, 149, 85, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 31, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 85, 85, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 110, 85, 110, 85, 110, 85, 110, 85, 110, 85, 85, 0, 0, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 217, 218, 218, 218, 218, 218, 218, 218, 218, 218, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 218, 218, 218, 217, 218, 218, 218, 218, 218, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 218, 218, 218, 218, 217, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 30, 85, 85, 31, 0, 0, 30, 85, 85, 108, 109, 108, 109, 85, 85, 85, 85, 85, 85, 85, 108, 109, 108, 109, 108, 218, 218, 218, 218, 218, 217, 218, 109, 85, 85, 108, 218, 218, 109, 108, 218, 218, 109, 108, 109, 85, 85, 85, 85, 85, 85, 85, 108, 109, 108, 109, 108, 218, 109, 85, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 85, 85, 219, 220, 1, 1, 1, 220, 220, 220, 221, 85, 85, 85, 0, 0, 85, 85, 147, 85, 147, 85, 85, 85, 147, 85, 147, 85, 85, 85, 0, 0, 0, 0, 0, 0, 217, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 109, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 85, 85, 85, 85, 255, 1, 256, 85, 85, 85, 85, 85, 85, 85, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 217, 0, 85, 85, 85, 85, 85, 108, 109, 85, 85, 85, 85, 85, 108, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 109, 85, 85, 85, 85, 108, 109, 85, 85, 85, 85, 85, 85, 85, 108, 109, 108, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 0, 0, 109, 108, 109, 85, 85, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 108, 109, 85, 85, 108, 0, 0, 0, 0, 0, 0, 0, 109, 108, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 109, 85, 85, 85, 85, 1, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 0, 0, 0, 217, 0, 109, 85, 85, 85, 85, 0, 0, 109, 85, 85, 85, 108, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 218, 218, 218, 218, 217, 218, 218, 218, 218, 109, 108, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 218, 218, 218, 218, 0, 0, 218, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 0, 218, 218, 218, 218, 1, 218, 218, 218, 218, 218, 218, 217, 0, 0, 0, 0, 0, 218, 218, 218, 218, 217, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 218, 218, 109, 108, 0, 0, 0, 218, 218, 218, 0, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 217, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 218, 218, 218, 218, 218, 218, 217, 218, 218, 218, 218, 218, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 217, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 31, 30, 85, 85, 31, 30, 31, 30, 85, 85, 31, 30, 85, 85, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 31, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1],
    [0, 30, 85, 85, 110, 85, 85, 85, 85, 85, 85, 372, 373, 85, 85, 372, 373, 85, 85, 372, 373, 85, 85, 85, 85, 85, 85, 85, 110, 85, 85, 0, 0, 0, 0, 217, 0, 0, 30, 85, 85, 372, 373, 85, 372, 373, 85, 372, 373, 85, 85, 85, 31, 0, 0, 0, 0, 0, 217, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 30, 31, 0, 217, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 374, 375, 85, 374, 376, 375, 85, 85, 374, 375, 85, 85, 0, 1],
    [0, 85, 85, 85, 85, 85, 110, 85, 85, 85, 85, 377, 378, 85, 85, 377, 378, 85, 85, 377, 378, 85, 85, 85, 85, 85, 110, 85, 85, 85, 85, 0, 0, 0, 0, 217, 0, 30, 85, 85, 85, 377, 378, 85, 377, 378, 85, 377, 378, 85, 85, 85, 85, 31, 0, 0, 0, 0, 217, 0, 30, 85, 85, 85, 85, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 85, 147, 85, 31, 0, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 30, 31, 30, 85, 85, 85, 85, 85, 85, 31, 217, 0, 111, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 379, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 30, 85, 110, 85, 85, 85, 85, 110, 85, 110, 85, 85, 85, 31, 0, 30, 85, 85, 85, 85, 85, 85, 147, 85, 147, 85, 147, 85, 147, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 380, 381, 85, 380, 2, 381, 85, 85, 380, 381, 85, 85, 0, 1],
    [0, 85, 85, 85, 110, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 110, 85, 85, 85, 110, 85, 85, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 30, 85, 85, 31, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 110, 85, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1],
    [0, 85, 85, 85, 85, 85, 110, 85, 85, 85, 85, 85, 372, 373, 85, 85, 85, 85, 372, 373, 85, 85, 85, 85, 85, 85, 110, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 372, 373, 85, 372, 373, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 85, 147, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 218, 218, 109, 85, 110, 85, 85, 85, 85, 110, 85, 110, 85, 85, 85, 108, 218, 109, 85, 85, 85, 85, 85, 85, 147, 85, 147, 85, 147, 85, 147, 85, 85, 85, 85, 85, 85, 85, 0, 85, 85, 85, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 218, 218, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 374, 375, 85, 85, 374, 375, 85, 374, 375, 85, 0, 1],
    [0, 109, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 377, 378, 85, 85, 85, 85, 377, 378, 85, 85, 85, 85, 85, 85, 85, 85, 110, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 377, 378, 85, 377, 378, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 1, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 380, 381, 85, 85, 380, 381, 85, 380, 381, 85, 0, 1],
    [0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 109, 85, 85, 108, 109, 85, 85, 85, 108, 109, 85, 85, 108, 109, 108, 109, 85, 85, 108, 109, 85, 85, 85, 85, 85, 0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 1, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 109, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1],
    [0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 109, 108, 218, 218, 218, 218, 218, 218, 218, 217, 218, 218, 218, 218, 218, 218, 0, 0, 217, 218, 0, 0, 218, 109, 108, 0, 0, 218, 217, 0, 0, 0, 0, 109, 108, 0, 0, 218, 218, 218, 218, 218, 0, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 1, 85, 85, 85, 85, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 218, 218, 218, 218, 217, 218, 218, 218, 218, 218, 0, 0, 0, 0, 0, 218, 217, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 217, 218, 0, 0, 0, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 395, 395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 85, 85, 85, 0, 0, 0, 0, 0, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394],
    [394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 395, 395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 217, 0, 30, 31, 0, 0, 0, 0, 0, 217, 0, 0, 30, 31, 0, 0, 2, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 85, 85, 85, 0, 0, 0, 0, 0, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 30, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394],
    [394, 394, 403, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 0, 0, 0, 30, 85, 85, 85, 85, 85, 31, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 31, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 30, 85, 85, 85, 31, 0, 0, 30, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 85, 85, 85, 85, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 85, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 217, 0, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 394],
    [394, 394, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 404, 404, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 395, 395, 0, 0, 404, 404, 404, 404, 408, 409, 409, 410, 404, 404, 404, 404, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 31, 30, 85, 85, 31, 0, 30, 31, 0, 30, 31, 0, 30, 31, 0, 30, 1, 85, 85, 85, 85, 31, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 85, 85, 85, 85, 85, 85, 108, 0, 0, 109, 85, 85, 0, 0, 0, 0, 0, 0, 217, 0, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 394, 404, 408, 410, 404, 408, 412, 410, 404, 408, 410, 404, 404, 394, 394, 394],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 404, 413, 413, 413, 414, 2, 2, 415, 413, 413, 413, 404, 0, 0, 0, 85, 85, 85, 110, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 85, 85, 85, 85, 85, 108, 0, 0, 0, 0, 109, 85, 31, 0, 0, 0, 0, 0, 217, 30, 85, 85, 85, 85, 85, 219, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 1, 1, 1, 1, 1, 1, 1, 1, 394, 404, 414, 415, 404, 414, 2, 415, 404, 414, 415, 404, 404, 394, 394, 394],
    [394, 394, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 404, 404, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 395, 395, 0, 0, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 0, 0, 0, 85, 85, 110, 85, 110, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 416, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 255, 1, 1, 1, 1, 1, 1, 1, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 394],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 404, 413, 413, 413, 404, 404, 404, 404, 413, 413, 413, 404, 0, 0, 0, 85, 85, 85, 110, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 147, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 1, 1, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 423, 423, 423, 423, 424, 85, 85, 85, 85, 85, 85, 411, 85, 85, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 394],
    [394, 394, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 404, 404, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 395, 395, 0, 0, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 108, 109, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 425, 425, 425, 425, 426, 85, 85, 85, 85, 411, 85, 85, 85, 85, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 394],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 0, 0, 0, 109, 85, 85, 85, 85, 85, 108, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 108, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 109, 85, 85, 85, 108, 0, 0, 109, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 425, 425, 425, 425, 426, 85, 85, 85, 85, 85, 85, 85, 396, 85, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 394],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 427, 427, 427, 427, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 218, 218, 218, 218, 218, 217, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 218, 218, 218, 218, 217, 0, 0, 0, 0, 218, 218, 217, 218, 218, 218, 218, 218, 0, 0, 218, 109, 108, 218, 218, 218, 218, 109, 108, 218, 218, 218, 218, 218, 218, 217, 218, 109, 108, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 85, 85, 218, 0, 0, 0, 0, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 396, 396, 396, 396, 396, 396, 396, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 218, 218, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 109, 85, 85, 218, 218, 218, 218, 218, 218, 218, 218, 218, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 394, 427, 427, 427, 427, 427, 428, 427, 427, 427, 427, 427, 427, 394, 394, 394],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 0, 0, 0, 0, 0, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 396, 396, 396, 396, 396, 396, 396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 394, 394, 394, 394, 394, 394, 428, 394, 394, 394, 394, 394, 394, 394, 394, 394],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 396, 396, 396, 396, 396, 396, 396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 0, 0, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 432, 394, 394, 403, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 0, 0, 0, 0, 0, 217, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 396, 396, 396, 396, 396, 396, 396, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 433, 434, 431, 431, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 0, 0, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 30, 31, 0, 0, 0, 217, 0, 85, 85, 31, 0, 0, 0, 0, 0, 0, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 85, 396, 85, 85, 85, 85, 396, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 431, 431, 433, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 434, 431, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 0, 0, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 404, 404, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 395, 395, 31, 30, 85, 85, 31, 0, 0, 217, 0, 85, 85, 85, 31, 0, 0, 0, 0, 0, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 217, 0, 30, 31, 0, 0, 0, 30, 31, 0, 0, 30, 31, 30, 85, 85, 31, 0, 30, 31, 30, 1, 1, 1, 1, 1, 1, 1, 1, 0, 85, 372, 373, 85, 372, 437, 373, 85, 372, 373, 85, 85, 0, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 85, 85, 85, 85, 85, 85, 396, 0, 85, 85, 85, 85, 438, 423, 423, 423, 423, 424, 85, 85, 85, 85, 0, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 431, 433, 85, 85, 85, 85, 439, 440, 441, 85, 85, 85, 85, 85, 85, 431, 411, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 411, 0, 0, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 85, 85, 85, 85, 85, 31, 0, 217, 30, 85, 85, 85, 85, 31, 0, 0, 0, 30, 404, 413, 404, 413, 404, 413, 404, 413, 404, 413, 404, 404, 0, 0, 0, 85, 147, 85, 147, 85, 147, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 1, 1, 1, 1, 1, 1, 1, 0, 85, 377, 378, 85, 377, 2, 378, 85, 377, 378, 85, 85, 0, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 85, 85, 85, 396, 85, 85, 396, 0, 85, 85, 411, 85, 442, 425, 425, 425, 425, 426, 85, 411, 85, 85, 0, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 431, 85, 85, 443, 85, 443, 444, 2, 445, 443, 85, 443, 85, 85, 85, 431, 411, 85, 85, 85, 85, 85, 443, 85, 85, 443, 85, 85, 85, 411, 85, 411, 0, 0, 85, 85, 85, 85, 85, 85, 85, 219, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 446, 220, 1, 1, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 404, 404, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 404, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 446, 446, 446, 446, 446, 446, 446, 446, 85, 85, 85, 85, 85, 85, 85, 85, 396, 0, 85, 85, 85, 85, 442, 425, 425, 425, 425, 426, 85, 85, 85, 85, 0, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 431, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 411, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 411, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 255, 1, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 218, 218, 218, 109, 404, 413, 404, 413, 404, 413, 404, 413, 404, 413, 404, 404, 0, 0, 0, 85, 147, 85, 147, 85, 147, 85, 85, 111, 112, 112, 112, 112, 112, 1, 1, 1, 1, 1, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 1, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 372, 373, 85, 85, 85, 372, 373, 85, 85, 85, 218, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 85, 85, 85, 396, 85, 85, 396, 0, 85, 85, 411, 85, 448, 449, 449, 449, 449, 450, 85, 411, 85, 85, 0, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 431, 85, 85, 443, 85, 443, 85, 85, 85, 443, 85, 443, 85, 85, 85, 431, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 411, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 404, 404, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 395, 395, 108, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 377, 378, 85, 85, 85, 377, 378, 85, 85, 85, 0, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 85, 85, 85, 85, 85, 85, 396, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 431, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 411, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 411, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 85, 396, 85, 85, 85, 85, 396, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 405, 0, 0, 431, 431, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 452, 431, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 453, 427, 427, 454, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 0, 0, 0, 0, 218, 218, 218, 218, 218, 218, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 0, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 396, 396, 396, 396, 396, 396, 396, 0, 0, 218, 218, 218, 218, 218, 85, 85, 218, 218, 218, 218, 218, 0, 0, 0, 0, 218, 218, 218, 218, 218, 405, 405, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 405, 405, 0, 0, 431, 431, 431, 455, 455, 455, 455, 456, 455, 455, 455, 455, 455, 455, 431, 431, 411, 85, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 146, 85, 85, 396, 396, 396, 396, 396, 396, 396, 0, 0, 0, 0, 0, 0, 0, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 405, 405, 0, 0, 431, 431, 431, 431, 431, 431, 431, 456, 431, 431, 431, 431, 431, 431, 431, 431, 411, 85, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 145, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 431, 431, 431, 431, 431, 431, 431, 85, 85, 431, 431, 431, 431, 431, 431, 431, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 431, 431, 431, 431, 431, 431, 431, 456, 431, 431, 431, 431, 431, 431, 431, 431, 411, 85, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 0, 0, 0, 0, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 85, 145, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 431, 431, 431, 433, 434, 431, 431, 85, 85, 431, 431, 2, 431, 431, 431, 431, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 431, 431, 433, 434, 433, 434, 431, 456, 431, 431, 431, 433, 434, 431, 431, 431, 411, 85, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 0, 0, 0, 0, 30, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 442, 425, 425, 425, 425, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 85, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 431, 431, 433, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 434, 431, 431, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 85, 85, 411, 411, 431, 431, 85, 85, 85, 85, 431, 456, 431, 431, 431, 85, 85, 431, 431, 431, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 0, 0, 0, 0, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 404, 404, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 395, 395, 0, 85, 85, 85, 85, 111, 112, 112, 112, 112, 113, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 438, 423, 423, 423, 423, 424, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 442, 425, 425, 425, 425, 1, 1, 1, 0, 85, 85, 439, 441, 85, 439, 457, 441, 85, 439, 441, 85, 0, 1, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 85, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 434, 433, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 434, 433, 411, 85, 85, 85, 85, 85, 411, 85, 85, 85, 411, 411, 85, 85, 411, 411, 431, 433, 85, 85, 85, 85, 431, 456, 431, 431, 431, 85, 85, 431, 431, 431, 411, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 0, 0, 0, 0, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 85, 85, 396, 85, 145, 1, 1, 1, 1, 146, 85, 396, 85, 85, 0, 0, 85, 85, 411, 85, 442, 425, 425, 425, 425, 426, 85, 411, 85, 85, 0, 0, 85, 85, 411, 85, 411, 85, 85, 85, 442, 425, 425, 425, 425, 1, 1, 1, 0, 85, 85, 444, 445, 85, 444, 2, 445, 85, 444, 445, 85, 0, 1, 425, 425, 425, 425, 425, 425, 425, 425, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 450, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 411, 411, 85, 85, 411, 411, 431, 85, 85, 85, 85, 85, 434, 456, 431, 431, 433, 85, 85, 434, 431, 433, 85, 85, 411, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 443, 85, 85, 85, 85, 443, 85, 85, 85, 85, 411, 0, 0, 0, 30, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 404, 404, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 395, 395, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 146, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 442, 425, 425, 425, 425, 426, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 442, 425, 425, 425, 425, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1, 425, 425, 425, 425, 425, 425, 425, 458, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 459, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 411, 85, 85, 85, 411, 411, 85, 85, 411, 411, 431, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 0, 0, 30, 85, 85, 85, 85, 85, 85, 145, 446, 1, 446, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 85, 85, 396, 85, 219, 220, 220, 220, 220, 221, 85, 396, 85, 85, 0, 0, 85, 85, 411, 85, 448, 449, 449, 449, 449, 450, 85, 411, 85, 85, 0, 0, 85, 85, 411, 85, 411, 85, 85, 85, 442, 425, 425, 425, 425, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 411, 411, 85, 85, 411, 411, 431, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 452, 455, 451, 85, 85, 411, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 0, 0, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 404, 404, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 404, 407, 404, 395, 395, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 85, 85, 85, 85, 85, 85, 85, 85, 442, 425, 425, 425, 425, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1, 425, 425, 425, 425, 425, 425, 426, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 85, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 452, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 452, 451, 411, 85, 85, 85, 85, 85, 411, 85, 85, 85, 411, 411, 85, 85, 411, 411, 431, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 431, 431, 411, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 0, 0, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 454, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 395, 395, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 442, 425, 425, 425, 425, 1, 1, 1, 0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 1, 425, 425, 425, 425, 425, 425, 426, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 85, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 431, 431, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 452, 431, 431, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 85, 85, 411, 411, 431, 431, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 431, 431, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 0, 0, 109, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 394, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 428, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 427, 395, 395, 0, 0, 218, 218, 218, 218, 218, 85, 85, 218, 218, 218, 218, 218, 0, 0, 0, 0, 218, 218, 218, 218, 218, 85, 85, 218, 218, 218, 218, 218, 0, 0, 0, 0, 218, 218, 218, 218, 218, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 0, 218, 218, 218, 218, 218, 218, 217, 218, 218, 218, 218, 218, 0, 1, 425, 425, 425, 425, 425, 425, 426, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 431, 431, 431, 451, 452, 455, 455, 455, 455, 455, 455, 455, 455, 431, 431, 431, 411, 85, 411, 85, 85, 85, 411, 85, 411, 85, 411, 411, 85, 85, 411, 411, 431, 431, 451, 452, 451, 452, 455, 455, 455, 455, 455, 451, 452, 431, 431, 431, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 0, 0, 0, 218, 109, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 428, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 395, 395, 0, 0, 0, 0, 0, 0, 0, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 145, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 217, 0, 0, 0, 0, 0, 0, 1, 425, 425, 425, 425, 425, 425, 426, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 411, 85, 411, 85, 85, 85, 411, 85, 411, 85, 411, 411, 85, 85, 411, 411, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 0, 0, 0, 0, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 428, 394, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 411, 411, 411, 411, 411, 411, 411, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 85, 85, 85, 411, 85, 411, 85, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 0, 0, 0, 0, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 428, 394, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 411, 411, 411, 411, 411, 411, 411, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 85, 85, 85, 411, 85, 411, 85, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 431, 431, 431, 431, 431, 433, 434, 2, 431, 431, 431, 431, 431, 431, 431, 431, 0, 0, 0, 0, 30, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 428, 394, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 411, 411, 85, 85, 85, 85, 85, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 431, 433, 85, 85, 85, 85, 85, 85, 434, 431, 431, 433, 85, 85, 434, 431, 0, 0, 0, 0, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 428, 394, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 411, 411, 85, 85, 85, 411, 85, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 411, 85, 85, 85, 411, 85, 411, 411, 85, 411, 85, 85, 85, 411, 85, 85, 411, 85, 411, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 433, 85, 85, 85, 85, 85, 85, 85, 85, 434, 433, 85, 85, 85, 85, 431, 0, 0, 0, 0, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 394, 428, 394, 396, 85, 85, 396, 85, 396, 85, 396, 85, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 448, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 425, 425, 425, 425, 465, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 450, 85, 85, 85, 411, 85, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 431, 0, 0, 0, 30, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 466, 425, 425, 458, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 411, 85, 411, 85, 411, 85, 411, 85, 411, 85, 411, 411, 85, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 0, 0, 30, 85, 85, 85, 85, 85, 85, 145, 446, 1, 446, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 396, 85, 85, 396, 85, 396, 85, 396, 85, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 455, 455, 455, 455, 85, 85, 85, 425, 425, 85, 85, 85, 85, 85, 85, 85, 455, 455, 455, 455, 455, 85, 85, 85, 85, 85, 85, 85, 411, 85, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 438, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 424, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 431, 0, 0, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 411, 411, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 431, 431, 431, 431, 85, 85, 85, 425, 425, 85, 85, 85, 85, 85, 85, 85, 431, 431, 431, 431, 431, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 411, 85, 85, 85, 411, 85, 411, 411, 85, 411, 85, 85, 85, 411, 85, 85, 411, 85, 411, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 451, 85, 85, 85, 85, 85, 85, 85, 85, 452, 451, 85, 85, 85, 85, 431, 0, 0, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 431, 431, 431, 85, 85, 85, 425, 425, 85, 85, 85, 85, 85, 85, 85, 431, 431, 431, 431, 431, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 431, 451, 85, 85, 85, 85, 85, 85, 452, 431, 431, 451, 85, 85, 452, 431, 0, 0, 109, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 427, 394, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 85, 85, 396, 85, 85, 85, 396, 85, 396, 85, 396, 396, 411, 411, 411, 85, 85, 411, 411, 411, 411, 85, 85, 411, 411, 85, 431, 431, 431, 431, 85, 85, 85, 425, 425, 85, 85, 85, 455, 85, 455, 85, 431, 431, 431, 431, 431, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 411, 411, 411, 85, 411, 411, 85, 411, 85, 85, 85, 411, 85, 411, 85, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 431, 431, 455, 455, 455, 451, 452, 455, 431, 431, 431, 431, 455, 455, 431, 431, 0, 0, 0, 218, 109, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [394, 394, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 404, 394, 394, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 85, 85, 396, 85, 85, 85, 396, 85, 396, 85, 396, 396, 411, 411, 411, 85, 85, 411, 411, 411, 411, 85, 85, 411, 411, 85, 431, 431, 431, 431, 85, 85, 85, 425, 425, 85, 85, 85, 431, 85, 431, 85, 431, 431, 431, 431, 431, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 411, 411, 411, 85, 411, 411, 85, 411, 85, 85, 85, 411, 85, 411, 85, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 0, 0, 0, 0, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 85, 85, 396, 85, 85, 85, 396, 85, 396, 85, 396, 396, 431, 431, 431, 85, 85, 431, 431, 431, 431, 85, 85, 431, 431, 85, 431, 431, 431, 431, 85, 85, 85, 425, 425, 85, 85, 85, 431, 85, 431, 85, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 411, 411, 411, 85, 411, 411, 85, 411, 85, 85, 85, 411, 85, 411, 85, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 0, 0, 0, 0, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 85, 85, 396, 85, 85, 85, 396, 85, 396, 85, 396, 396, 431, 431, 431, 85, 85, 434, 431, 2, 433, 85, 85, 434, 433, 85, 434, 431, 431, 433, 85, 85, 85, 425, 425, 85, 85, 85, 431, 85, 431, 85, 434, 431, 431, 431, 431, 431, 431, 431, 431, 2, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 411, 411, 411, 85, 411, 411, 85, 411, 85, 85, 85, 411, 85, 411, 85, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 31, 0, 0, 2, 30, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 396, 85, 85, 85, 85, 85, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 431, 431, 433, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 1, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 434, 431, 431, 433, 85, 85, 85, 85, 85, 85, 85, 434, 433, 85, 85, 85, 434, 431, 431, 433, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 85, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 85, 85, 85, 85, 85, 85, 396, 85, 85, 85, 85, 396, 434, 433, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 1, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 110, 110, 110, 110, 85, 85, 85, 85, 85, 85, 85, 85, 434, 433, 85, 85, 459, 85, 459, 85, 85, 85, 85, 85, 85, 459, 85, 85, 434, 433, 85, 85, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 411, 85, 411, 411, 85, 85, 85, 85, 411, 85, 85, 85, 442, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 425, 426, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 411, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 411, 411, 411, 411, 85, 85, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 1, 85, 85, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 110, 110, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 448, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 449, 450, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 411, 85, 85, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 85, 85, 85, 85, 85, 85, 396, 85, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 446, 446, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 110, 110, 110, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 459, 85, 459, 85, 85, 85, 85, 85, 85, 459, 85, 85, 85, 85, 85, 85, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 85, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 1, 85, 85, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 110, 110, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 411, 85, 85, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 396, 85, 85, 85, 85, 85, 85, 396, 85, 85, 85, 85, 396, 452, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 1, 85, 85, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 110, 110, 110, 110, 85, 85, 85, 85, 85, 85, 85, 85, 452, 451, 85, 85, 459, 85, 459, 85, 85, 85, 85, 85, 85, 459, 85, 85, 452, 451, 85, 85, 85, 411, 85, 85, 85, 85, 411, 85, 85, 85, 411, 85, 411, 411, 85, 85, 85, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 431, 431, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 1, 1, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 452, 431, 431, 451, 85, 85, 85, 85, 85, 85, 85, 452, 451, 85, 85, 85, 452, 431, 431, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 396, 85, 396, 85, 396, 396, 431, 431, 431, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 451, 85, 425, 425, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 451, 85, 85, 431, 431, 431, 431, 455, 455, 455, 455, 455, 85, 85, 431, 431, 455, 455, 455, 431, 431, 431, 431, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 108, 218, 218, 218, 109, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 396, 85, 396, 85, 396, 396, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 85, 425, 425, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 85, 85, 431, 431, 431, 431, 431, 431, 431, 431, 431, 85, 85, 431, 431, 431, 431, 431, 431, 431, 431, 431, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 85, 85, 85, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 0, 0, 0, 0, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 0, 0, 0, 0, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 396, 85, 396, 85, 396, 396, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 85, 425, 425, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 85, 85, 431, 431, 431, 431, 431, 431, 431, 431, 431, 85, 85, 431, 431, 431, 431, 431, 431, 431, 431, 431, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 30, 85, 85, 31, 0, 0, 0, 396, 396, 396, 396, 396, 396, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 396, 85, 396, 85, 396, 396, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 2, 433, 85, 425, 425, 434, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 433, 85, 85, 431, 431, 431, 431, 431, 431, 2, 431, 433, 85, 85, 431, 431, 431, 431, 431, 431, 431, 431, 431, 411, 85, 411, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 411, 31, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 431, 433, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 434, 431, 431, 433, 85, 85, 85, 425, 425, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 431, 431, 431, 431, 433, 85, 85, 85, 85, 85, 431, 431, 431, 431, 431, 431, 431, 431, 431, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 85, 85, 85, 85, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 30, 31, 30, 85, 85, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [0, 0, 30, 85, 85, 372, 373, 85, 372, 373, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 30, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 396, 433, 85, 85, 85, 85, 85, 85, 114, 117, 116, 85, 85, 85, 85, 85, 431, 431, 85, 85, 85, 85, 425, 425, 85, 459, 85, 85, 85, 459, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 459, 85, 85, 85, 85, 85, 434, 431, 431, 431, 433, 85, 85, 85, 85, 85, 85, 431, 431, 431, 431, 431, 431, 431, 431, 433, 85, 85, 85, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 85, 85, 85, 31, 0, 0, 0, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 30, 31, 0, 0, 0, 30, 31, 0, 30, 31, 30, 31, 30, 31, 0, 0, 30, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [0, 30, 85, 85, 85, 377, 378, 85, 377, 378, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 147, 85, 147, 148, 2, 149, 147, 85, 147, 85, 85, 431, 431, 85, 85, 85, 85, 425, 425, 85, 85, 85, 459, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 459, 85, 85, 85, 85, 434, 431, 433, 85, 85, 85, 85, 85, 85, 85, 434, 431, 431, 431, 431, 431, 431, 433, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 31, 0, 0, 85, 85, 85, 110, 85, 85, 85, 31, 0, 0, 30, 31, 30, 85, 85, 85, 85, 85, 85, 85, 31, 30, 31, 30, 31, 0, 0, 30, 31, 0, 30, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 145, 1, 1, 1, 1, 1, 1],
    [0, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 431, 85, 85, 459, 85, 425, 425, 85, 459, 85, 85, 85, 459, 85, 85, 85, 85, 85, 459, 85, 85, 459, 85, 85, 459, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 31, 30, 85, 85, 110, 85, 110, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 471, 1, 1, 1, 1, 1, 1, 1],
    [0, 109, 85, 85, 85, 85, 372, 373, 85, 372, 373, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 147, 85, 147, 85, 85, 85, 147, 85, 147, 85, 85, 431, 431, 85, 85, 85, 85, 425, 425, 85, 85, 85, 459, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 459, 85, 85, 85, 85, 452, 455, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 455, 455, 451, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 110, 85, 85, 85, 108, 218, 218, 109, 108, 109, 85, 85, 85, 85, 85, 85, 85, 108, 109, 108, 109, 108, 218, 218, 109, 108, 218, 109, 85, 85, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 109, 85, 85, 85, 377, 378, 85, 377, 378, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 109, 396, 396, 85, 85, 85, 85, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 396, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 431, 85, 85, 85, 85, 425, 425, 85, 459, 85, 85, 85, 459, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 459, 85, 85, 85, 85, 85, 452, 431, 431, 431, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 431, 431, 451, 85, 85, 85, 85, 411, 85, 85, 411, 85, 411, 85, 411, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 85, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 109, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 0, 0, 396, 396, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 396, 396, 431, 451, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 452, 431, 431, 451, 85, 85, 85, 425, 425, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 431, 431, 431, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 431, 431, 431, 431, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 108, 109, 85, 85, 85, 85, 85, 85, 108, 0, 0, 0, 0, 0, 0, 0, 109, 108, 109, 85, 85, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 0, 0, 0, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 431, 431, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 431, 431, 431, 431, 455, 455, 451, 425, 425, 452, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 431, 431, 431, 431, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 455, 431, 431, 431, 431, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 108, 218, 218, 218, 0, 0, 109, 108, 218, 218, 218, 218, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 396, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 425, 425, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 431, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
];


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var THREE = __webpack_require__(0);
var RendererService = (function () {
    function RendererService(config) {
        if (config === void 0) { config = {}; }
        this._renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha: true
        });
        this._renderer.setSize(config.width || window.innerWidth, config.height || window.innerHeight);
        this._renderer.shadowMap.enabled = true;
        var element = config.element || document.body;
        element.appendChild(this._renderer.domElement);
    }
    RendererService.prototype.render = function (scene, camera, animate) {
        var _this = this;
        var animateMain = function (time) {
            if (animate) {
                animate(time);
            }
            _this._renderer.render(scene, camera);
            requestAnimationFrame(animateMain);
        };
        requestAnimationFrame(animateMain);
        return this._renderer;
    };
    return RendererService;
}());
exports.RendererService = RendererService;


/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = function( THREE ) {
	/**
	 * @author qiao / https://github.com/qiao
	 * @author mrdoob / http://mrdoob.com
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author erich666 / http://erichaines.com
	 */

// This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one finger move
//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
//    Pan - right mouse, or arrow keys / touch: three finter swipe

	function OrbitControls( object, domElement ) {

		this.object = object;

		this.domElement = ( domElement !== undefined ) ? domElement : document;

		// Set to false to disable this control
		this.enabled = true;

		// "target" sets the location of focus, where the object orbits around
		this.target = new THREE.Vector3();

		// How far you can dolly in and out ( PerspectiveCamera only )
		this.minDistance = 0;
		this.maxDistance = Infinity;

		// How far you can zoom in and out ( OrthographicCamera only )
		this.minZoom = 0;
		this.maxZoom = Infinity;

		// How far you can orbit vertically, upper and lower limits.
		// Range is 0 to Math.PI radians.
		this.minPolarAngle = 0; // radians
		this.maxPolarAngle = Math.PI; // radians

		// How far you can orbit horizontally, upper and lower limits.
		// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
		this.minAzimuthAngle = - Infinity; // radians
		this.maxAzimuthAngle = Infinity; // radians

		// Set to true to enable damping (inertia)
		// If damping is enabled, you must call controls.update() in your animation loop
		this.enableDamping = false;
		this.dampingFactor = 0.25;

		// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
		// Set to false to disable zooming
		this.enableZoom = true;
		this.zoomSpeed = 1.0;

		// Set to false to disable rotating
		this.enableRotate = true;
		this.rotateSpeed = 1.0;

		// Set to false to disable panning
		this.enablePan = true;
		this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

		// Set to true to automatically rotate around the target
		// If auto-rotate is enabled, you must call controls.update() in your animation loop
		this.autoRotate = false;
		this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

		// Set to false to disable use of the keys
		this.enableKeys = true;

		// The four arrow keys
		this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

		// Mouse buttons
		this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

		// for reset
		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.zoom0 = this.object.zoom;

		//
		// public methods
		//

		this.getPolarAngle = function () {

			return spherical.phi;

		};

		this.getAzimuthalAngle = function () {

			return spherical.theta;

		};

		this.reset = function () {

			scope.target.copy( scope.target0 );
			scope.object.position.copy( scope.position0 );
			scope.object.zoom = scope.zoom0;

			scope.object.updateProjectionMatrix();
			scope.dispatchEvent( changeEvent );

			scope.update();

			state = STATE.NONE;

		};

		// this method is exposed, but perhaps it would be better if we can make it private...
		this.update = function() {

			var offset = new THREE.Vector3();

			// so camera.up is the orbit axis
			var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
			var quatInverse = quat.clone().inverse();

			var lastPosition = new THREE.Vector3();
			var lastQuaternion = new THREE.Quaternion();

			return function update () {

				var position = scope.object.position;

				offset.copy( position ).sub( scope.target );

				// rotate offset to "y-axis-is-up" space
				offset.applyQuaternion( quat );

				// angle from z-axis around y-axis
				spherical.setFromVector3( offset );

				if ( scope.autoRotate && state === STATE.NONE ) {

					rotateLeft( getAutoRotationAngle() );

				}

				spherical.theta += sphericalDelta.theta;
				spherical.phi += sphericalDelta.phi;

				// restrict theta to be between desired limits
				spherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );

				// restrict phi to be between desired limits
				spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

				spherical.makeSafe();


				spherical.radius *= scale;

				// restrict radius to be between desired limits
				spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

				// move target to panned location
				scope.target.add( panOffset );

				offset.setFromSpherical( spherical );

				// rotate offset back to "camera-up-vector-is-up" space
				offset.applyQuaternion( quatInverse );

				position.copy( scope.target ).add( offset );

				scope.object.lookAt( scope.target );

				if ( scope.enableDamping === true ) {

					sphericalDelta.theta *= ( 1 - scope.dampingFactor );
					sphericalDelta.phi *= ( 1 - scope.dampingFactor );

				} else {

					sphericalDelta.set( 0, 0, 0 );

				}

				scale = 1;
				panOffset.set( 0, 0, 0 );

				// update condition is:
				// min(camera displacement, camera rotation in radians)^2 > EPS
				// using small-angle approximation cos(x/2) = 1 - x^2 / 8

				if ( zoomChanged ||
					lastPosition.distanceToSquared( scope.object.position ) > EPS ||
					8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

					scope.dispatchEvent( changeEvent );

					lastPosition.copy( scope.object.position );
					lastQuaternion.copy( scope.object.quaternion );
					zoomChanged = false;

					return true;

				}

				return false;

			};

		}();

		this.dispose = function() {

			scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
			scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
			scope.domElement.removeEventListener( 'wheel', onMouseWheel, false );

			scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
			scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
			scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );

			document.removeEventListener( 'mousemove', onMouseMove, false );
			document.removeEventListener( 'mouseup', onMouseUp, false );

			window.removeEventListener( 'keydown', onKeyDown, false );

			//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

		};

		//
		// internals
		//

		var scope = this;

		var changeEvent = { type: 'change' };
		var startEvent = { type: 'start' };
		var endEvent = { type: 'end' };

		var STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };

		var state = STATE.NONE;

		var EPS = 0.000001;

		// current position in spherical coordinates
		var spherical = new THREE.Spherical();
		var sphericalDelta = new THREE.Spherical();

		var scale = 1;
		var panOffset = new THREE.Vector3();
		var zoomChanged = false;

		var rotateStart = new THREE.Vector2();
		var rotateEnd = new THREE.Vector2();
		var rotateDelta = new THREE.Vector2();

		var panStart = new THREE.Vector2();
		var panEnd = new THREE.Vector2();
		var panDelta = new THREE.Vector2();

		var dollyStart = new THREE.Vector2();
		var dollyEnd = new THREE.Vector2();
		var dollyDelta = new THREE.Vector2();

		function getAutoRotationAngle() {

			return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

		}

		function getZoomScale() {

			return Math.pow( 0.95, scope.zoomSpeed );

		}

		function rotateLeft( angle ) {

			sphericalDelta.theta -= angle;

		}

		function rotateUp( angle ) {

			sphericalDelta.phi -= angle;

		}

		var panLeft = function() {

			var v = new THREE.Vector3();

			return function panLeft( distance, objectMatrix ) {

				v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
				v.multiplyScalar( - distance );

				panOffset.add( v );

			};

		}();

		var panUp = function() {

			var v = new THREE.Vector3();

			return function panUp( distance, objectMatrix ) {

				v.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix
				v.multiplyScalar( distance );

				panOffset.add( v );

			};

		}();

		// deltaX and deltaY are in pixels; right and down are positive
		var pan = function() {

			var offset = new THREE.Vector3();

			return function pan ( deltaX, deltaY ) {

				var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

				if ( scope.object instanceof THREE.PerspectiveCamera ) {

					// perspective
					var position = scope.object.position;
					offset.copy( position ).sub( scope.target );
					var targetDistance = offset.length();

					// half of the fov is center to top of screen
					targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

					// we actually don't use screenWidth, since perspective camera is fixed to screen height
					panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
					panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

				} else if ( scope.object instanceof THREE.OrthographicCamera ) {

					// orthographic
					panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
					panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

				} else {

					// camera neither orthographic nor perspective
					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
					scope.enablePan = false;

				}

			};

		}();

		function dollyIn( dollyScale ) {

			if ( scope.object instanceof THREE.PerspectiveCamera ) {

				scale /= dollyScale;

			} else if ( scope.object instanceof THREE.OrthographicCamera ) {

				scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
				scope.object.updateProjectionMatrix();
				zoomChanged = true;

			} else {

				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
				scope.enableZoom = false;

			}

		}

		function dollyOut( dollyScale ) {

			if ( scope.object instanceof THREE.PerspectiveCamera ) {

				scale *= dollyScale;

			} else if ( scope.object instanceof THREE.OrthographicCamera ) {

				scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
				scope.object.updateProjectionMatrix();
				zoomChanged = true;

			} else {

				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
				scope.enableZoom = false;

			}

		}

		//
		// event callbacks - update the object state
		//

		function handleMouseDownRotate( event ) {

			//console.log( 'handleMouseDownRotate' );

			rotateStart.set( event.clientX, event.clientY );

		}

		function handleMouseDownDolly( event ) {

			//console.log( 'handleMouseDownDolly' );

			dollyStart.set( event.clientX, event.clientY );

		}

		function handleMouseDownPan( event ) {

			//console.log( 'handleMouseDownPan' );

			panStart.set( event.clientX, event.clientY );

		}

		function handleMouseMoveRotate( event ) {

			//console.log( 'handleMouseMoveRotate' );

			rotateEnd.set( event.clientX, event.clientY );
			rotateDelta.subVectors( rotateEnd, rotateStart );

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			// rotating across whole screen goes 360 degrees around
			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

			// rotating up and down along whole screen attempts to go 360, but limited to 180
			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

			rotateStart.copy( rotateEnd );

			scope.update();

		}

		function handleMouseMoveDolly( event ) {

			//console.log( 'handleMouseMoveDolly' );

			dollyEnd.set( event.clientX, event.clientY );

			dollyDelta.subVectors( dollyEnd, dollyStart );

			if ( dollyDelta.y > 0 ) {

				dollyIn( getZoomScale() );

			} else if ( dollyDelta.y < 0 ) {

				dollyOut( getZoomScale() );

			}

			dollyStart.copy( dollyEnd );

			scope.update();

		}

		function handleMouseMovePan( event ) {

			//console.log( 'handleMouseMovePan' );

			panEnd.set( event.clientX, event.clientY );

			panDelta.subVectors( panEnd, panStart );

			pan( panDelta.x, panDelta.y );

			panStart.copy( panEnd );

			scope.update();

		}

		function handleMouseUp( event ) {

			//console.log( 'handleMouseUp' );

		}

		function handleMouseWheel( event ) {

			//console.log( 'handleMouseWheel' );

			if ( event.deltaY < 0 ) {

				dollyOut( getZoomScale() );

			} else if ( event.deltaY > 0 ) {

				dollyIn( getZoomScale() );

			}

			scope.update();

		}

		function handleKeyDown( event ) {

			//console.log( 'handleKeyDown' );

			switch ( event.keyCode ) {

				case scope.keys.UP:
					pan( 0, scope.keyPanSpeed );
					scope.update();
					break;

				case scope.keys.BOTTOM:
					pan( 0, - scope.keyPanSpeed );
					scope.update();
					break;

				case scope.keys.LEFT:
					pan( scope.keyPanSpeed, 0 );
					scope.update();
					break;

				case scope.keys.RIGHT:
					pan( - scope.keyPanSpeed, 0 );
					scope.update();
					break;

			}

		}

		function handleTouchStartRotate( event ) {

			//console.log( 'handleTouchStartRotate' );

			rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

		}

		function handleTouchStartDolly( event ) {

			//console.log( 'handleTouchStartDolly' );

			var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
			var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

			var distance = Math.sqrt( dx * dx + dy * dy );

			dollyStart.set( 0, distance );

		}

		function handleTouchStartPan( event ) {

			//console.log( 'handleTouchStartPan' );

			panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

		}

		function handleTouchMoveRotate( event ) {

			//console.log( 'handleTouchMoveRotate' );

			rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
			rotateDelta.subVectors( rotateEnd, rotateStart );

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			// rotating across whole screen goes 360 degrees around
			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

			// rotating up and down along whole screen attempts to go 360, but limited to 180
			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

			rotateStart.copy( rotateEnd );

			scope.update();

		}

		function handleTouchMoveDolly( event ) {

			//console.log( 'handleTouchMoveDolly' );

			var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
			var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

			var distance = Math.sqrt( dx * dx + dy * dy );

			dollyEnd.set( 0, distance );

			dollyDelta.subVectors( dollyEnd, dollyStart );

			if ( dollyDelta.y > 0 ) {

				dollyOut( getZoomScale() );

			} else if ( dollyDelta.y < 0 ) {

				dollyIn( getZoomScale() );

			}

			dollyStart.copy( dollyEnd );

			scope.update();

		}

		function handleTouchMovePan( event ) {

			//console.log( 'handleTouchMovePan' );

			panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

			panDelta.subVectors( panEnd, panStart );

			pan( panDelta.x, panDelta.y );

			panStart.copy( panEnd );

			scope.update();

		}

		function handleTouchEnd( event ) {

			//console.log( 'handleTouchEnd' );

		}

		//
		// event handlers - FSM: listen for events and reset state
		//

		function onMouseDown( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();

			if ( event.button === scope.mouseButtons.ORBIT ) {

				if ( scope.enableRotate === false ) return;

				handleMouseDownRotate( event );

				state = STATE.ROTATE;

			} else if ( event.button === scope.mouseButtons.ZOOM ) {

				if ( scope.enableZoom === false ) return;

				handleMouseDownDolly( event );

				state = STATE.DOLLY;

			} else if ( event.button === scope.mouseButtons.PAN ) {

				if ( scope.enablePan === false ) return;

				handleMouseDownPan( event );

				state = STATE.PAN;

			}

			if ( state !== STATE.NONE ) {

				document.addEventListener( 'mousemove', onMouseMove, false );
				document.addEventListener( 'mouseup', onMouseUp, false );

				scope.dispatchEvent( startEvent );

			}

		}

		function onMouseMove( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();

			if ( state === STATE.ROTATE ) {

				if ( scope.enableRotate === false ) return;

				handleMouseMoveRotate( event );

			} else if ( state === STATE.DOLLY ) {

				if ( scope.enableZoom === false ) return;

				handleMouseMoveDolly( event );

			} else if ( state === STATE.PAN ) {

				if ( scope.enablePan === false ) return;

				handleMouseMovePan( event );

			}

		}

		function onMouseUp( event ) {

			if ( scope.enabled === false ) return;

			handleMouseUp( event );

			document.removeEventListener( 'mousemove', onMouseMove, false );
			document.removeEventListener( 'mouseup', onMouseUp, false );

			scope.dispatchEvent( endEvent );

			state = STATE.NONE;

		}

		function onMouseWheel( event ) {

			if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;

			event.preventDefault();
			event.stopPropagation();

			handleMouseWheel( event );

			scope.dispatchEvent( startEvent ); // not sure why these are here...
			scope.dispatchEvent( endEvent );

		}

		function onKeyDown( event ) {

			if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

			handleKeyDown( event );

		}

		function onTouchStart( event ) {

			if ( scope.enabled === false ) return;

			switch ( event.touches.length ) {

				case 1:	// one-fingered touch: rotate

					if ( scope.enableRotate === false ) return;

					handleTouchStartRotate( event );

					state = STATE.TOUCH_ROTATE;

					break;

				case 2:	// two-fingered touch: dolly

					if ( scope.enableZoom === false ) return;

					handleTouchStartDolly( event );

					state = STATE.TOUCH_DOLLY;

					break;

				case 3: // three-fingered touch: pan

					if ( scope.enablePan === false ) return;

					handleTouchStartPan( event );

					state = STATE.TOUCH_PAN;

					break;

				default:

					state = STATE.NONE;

			}

			if ( state !== STATE.NONE ) {

				scope.dispatchEvent( startEvent );

			}

		}

		function onTouchMove( event ) {

			if ( scope.enabled === false ) return;

			event.preventDefault();
			event.stopPropagation();

			switch ( event.touches.length ) {

				case 1: // one-fingered touch: rotate

					if ( scope.enableRotate === false ) return;
					if ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...

					handleTouchMoveRotate( event );

					break;

				case 2: // two-fingered touch: dolly

					if ( scope.enableZoom === false ) return;
					if ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...

					handleTouchMoveDolly( event );

					break;

				case 3: // three-fingered touch: pan

					if ( scope.enablePan === false ) return;
					if ( state !== STATE.TOUCH_PAN ) return; // is this needed?...

					handleTouchMovePan( event );

					break;

				default:

					state = STATE.NONE;

			}

		}

		function onTouchEnd( event ) {

			if ( scope.enabled === false ) return;

			handleTouchEnd( event );

			scope.dispatchEvent( endEvent );

			state = STATE.NONE;

		}

		function onContextMenu( event ) {

			event.preventDefault();

		}

		//

		scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );

		scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
		scope.domElement.addEventListener( 'wheel', onMouseWheel, false );

		scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
		scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
		scope.domElement.addEventListener( 'touchmove', onTouchMove, false );

		window.addEventListener( 'keydown', onKeyDown, false );

		// force an update at start

		this.update();

	};

	OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
	OrbitControls.prototype.constructor = OrbitControls;

	Object.defineProperties( OrbitControls.prototype, {

		center: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .center has been renamed to .target' );
				return this.target;

			}

		},

		// backward compatibility

		noZoom: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
				return ! this.enableZoom;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
				this.enableZoom = ! value;

			}

		},

		noRotate: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
				return ! this.enableRotate;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
				this.enableRotate = ! value;

			}

		},

		noPan: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
				return ! this.enablePan;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
				this.enablePan = ! value;

			}

		},

		noKeys: {

			get: function () {

				console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
				return ! this.enableKeys;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
				this.enableKeys = ! value;

			}

		},

		staticMoving : {

			get: function () {

				console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
				return ! this.enableDamping;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
				this.enableDamping = ! value;

			}

		},

		dynamicDampingFactor : {

			get: function () {

				console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
				return this.dampingFactor;

			},

			set: function ( value ) {

				console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
				this.dampingFactor = value;

			}

		}

	} );

	return OrbitControls;
};


/***/ })
],[7]);
//# sourceMappingURL=app.js.map